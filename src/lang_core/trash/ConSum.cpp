//---------------------------------------------------------------------------


#pragma hdrstop

#include "ConSum.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)
ConSum::ConSum(){
  ind=0; // индикатор типа получнного полубайта; изанч. старший
  carry=0; // перенос из младшего
  SAH=0; // накопитель
  SAL=0; // накопитель
  j=0;
  cout=0;
}
//------------------
void ConSum::LoadHByte(int hbyte){
  if(ind==0){   // принимаем старший
    SAH=hbyte+SAH;
    ind=1;// теперь следующий байт- младниц
  }
  else {  // последний отсчет из серии получили и моежм считать
    SAL=hbyte+SAL;
    carry=SAL;
    SAL=SAL%16;
    carry=(carry-SAL)/16;  // перенос  в старший разряд
    SAH+=carry;
    SAH=SAH%16;
    ind=0;
  }
  cout++;
}
// прием  посимвольно
void ConSum::LoadChar(char chbyte){
    int i=0;
    while(chbyte != KEY[i]){   // отсчитываем до нужного нам символа
    i++;
    if(i > 15){
        throw NotHex(); // исключение: введен какой то нетакой символ
      }
  }
  chbuf=i;
  LoadHByte(chbuf);
}
//-----------
char* ConSum::GetConSum(){
 if(cout%2 != 0){ 
   LoadHByte(0); // последний байт недобрали и его добираем
 }
 pStrH[1]='\0';
 pStrL[1]='\0';
 // сперва старший полубайт
 while(SAH!= j){   // отсчитываем до нужного нам символа
   j++;
 }
 pStrH[0] = KEY[j];
 j=0;
  // теперь младший
  while(SAL!= j){   // отсчитываем до нужного нам символа
    j++;
  }
  pStrL[0] = KEY[j];
  j=0;
  // объединяем строки
    strcat(pStrH,pStrL);
    // сбрасываем все!
      ind=0; // индикатор типа получнного полубайта; изанч. старший
  carry=0; // перенос из младшего
  SAH=0; // накопитель
  SAL=0; // накопитель
  cout=0;
    return pStrH;
}
